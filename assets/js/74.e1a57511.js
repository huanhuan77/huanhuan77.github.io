(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{439:function(_,v,t){"use strict";t.r(v);var a=t(44),s=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"html-面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#html-面试题"}},[_._v("#")]),_._v(" HTML 面试题")]),_._v(" "),t("h2",{attrs:{id:"_1-seo-优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-seo-优化"}},[_._v("#")]),_._v(" 1. SEO 优化")]),_._v(" "),t("ul",[t("li",[_._v("创建唯一且准确的网页标题 title")]),_._v(" "),t("li",[_._v("使用 "),t("meta"),_._v(" 元标签")]),_._v(" "),t("li",[_._v("使用语义化元素")]),_._v(" "),t("li",[_._v("利用 img 中的 alt 属性")]),_._v(" "),t("li",[_._v("设置 rel='nofollow' 忽略跟踪")]),_._v(" "),t("li",[_._v("扁平化网站结构")]),_._v(" "),t("li",[_._v("合理安排重要内容的位置")])]),_._v(" "),t("h2",{attrs:{id:"_2-什么是-web-语义化-有什么好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是-web-语义化-有什么好处"}},[_._v("#")]),_._v(" 2.什么是 web 语义化,有什么好处")]),_._v(" "),t("p",[_._v("Web 语义化是指通过 HTML 标记表示页面包含的信息,包含了 HTML 标签的语义化和 css 命名的语义化.")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("HTML 语义化是指:通过包含语义的标签,恰当的表示文档结构.")])]),_._v(" "),t("li",[t("p",[_._v("css 语义化是指:为 HTML 标签添加有意义的 class,id 补充未表达的语义")])])]),_._v(" "),t("p",[t("strong",[_._v("好处:")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("去掉样式后页面程序清晰的结构")])]),_._v(" "),t("li",[t("p",[_._v("搜索引擎更好地理解页面,有利于收录")])]),_._v(" "),t("li",[t("p",[_._v("便团队项目的可持续运作及维护")])])]),_._v(" "),t("h2",{attrs:{id:"_3-如何进行网站优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何进行网站优化"}},[_._v("#")]),_._v(" 3. 如何进行网站优化")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("减少 HTTP 请求数")])]),_._v(" "),t("li",[t("p",[_._v("从设计实现层面简化页面")])]),_._v(" "),t("li",[t("p",[_._v("合理设置 HTTP 缓存")])]),_._v(" "),t("li",[t("p",[_._v("资源合并与压缩")])]),_._v(" "),t("li",[t("p",[_._v("合并 CSS 图片，减少请求数的又一个好办法。")])]),_._v(" "),t("li",[t("p",[_._v("将外部脚本置底（将脚本内容在页面信息内容加载后再加载）")])]),_._v(" "),t("li",[t("p",[_._v("多图片网页使用图片懒加载。")])]),_._v(" "),t("li",[t("p",[_._v("在 js 中尽量减少闭包的使用")])]),_._v(" "),t("li",[t("p",[_._v("尽量合并 css 和 js 文件")])]),_._v(" "),t("li",[t("p",[_._v("尽量使用字体图标或者 SVG 图标，来代替传统的 PNG 等格式的图片")])]),_._v(" "),t("li",[t("p",[_._v("减少对 DOM 的操作")])]),_._v(" "),t("li",[t("p",[_._v("在 JS 中避免“嵌套循环”和 “死循环”")])]),_._v(" "),t("li",[t("p",[_._v("尽可能使用事件委托（事件代理）来处理事件绑定的操作")])])]),_._v(" "),t("h2",{attrs:{id:"_4-常见的兼容性问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-常见的兼容性问题"}},[_._v("#")]),_._v(" 4.常见的兼容性问题")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("png24 位的图片在 ie6 浏览器上出现背景")]),_._v(" "),t("ul",[t("li",[_._v("做成 png8，也可以引用一段脚本处理")])])]),_._v(" "),t("li",[t("p",[_._v("浏览器默认的 margin 和 padding 不同")]),_._v(" "),t("ul",[t("li",[_._v("添加一个全局的 margin:0；padding：0 来统一")])])]),_._v(" "),t("li",[t("p",[_._v("IE6 双边距 bug：在 IE6 下，如果对元素设置了浮动，同时又设置了 margin-left 或 margin-right，margin 值会加倍。")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("#box{ float:left; width:10px; margin:0 0 0 10px;}\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])])]),_._v(" "),t("li",[t("p",[_._v("Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])])])]),_._v(" "),t("h1",{attrs:{id:"css-面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-面试题"}},[_._v("#")]),_._v(" css 面试题")]),_._v(" "),t("h2",{attrs:{id:"_1-css-选择器及其优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-css-选择器及其优先级"}},[_._v("#")]),_._v(" 1. Css 选择器及其优先级")]),_._v(" "),t("p",[_._v("id 选择器,类选择器,属性选择器,伪类选择器,标签选择器,伪元素选择器,相邻兄弟选择器,子选择器,后代选择器,通配符")]),_._v(" "),t("p",[_._v("优先级:!important > 行内样式>ID 选择器 > 类选择器 > 标签 > 通配符")]),_._v(" "),t("h2",{attrs:{id:"_2-引入样式-link-和-import-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-引入样式-link-和-import-的区别"}},[_._v("#")]),_._v(" 2. 引入样式 link 和 import 的区别")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("link 是 XHTML 标签,而@important 是 css 提供的")])]),_._v(" "),t("li",[t("p",[_._v("页面被加载时,link 会同时被加载,而@important 引用的 css 会等到页面被加载完再加载")])]),_._v(" "),t("li",[t("p",[_._v("Important 只在 IE5 以上才能识别,而 link 是 XHML 标签,无兼容问题")])]),_._v(" "),t("li",[t("p",[_._v("Link 方式的样式权重高于 important 的权重")])]),_._v(" "),t("li",[t("p",[_._v("Link 支持使用 js 控制 DOM 去改变样式,而 important 不支持")])])]),_._v(" "),t("h2",{attrs:{id:"_3-常见的-css-布局单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-常见的-css-布局单位"}},[_._v("#")]),_._v(" 3. 常见的 css 布局单位")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Px:绝对单位,页面按精确像素展示")])]),_._v(" "),t("li",[t("p",[_._v("Em:相对单位,基准点为父节点字体的大小,如果自身定义了 font-size 则按自身来计算")])]),_._v(" "),t("li",[t("p",[_._v("Rem:相对于根元素 html font-size 计算值的倍数只相对于根元素的大小")])]),_._v(" "),t("li",[t("p",[_._v("Vw/vh\n​ Vw:相对于视窗的宽度,视窗宽度是 100vw")]),_._v(" "),t("p",[_._v("​ Vh:相对于视窗的高度,视窗高度是 100vh")]),_._v(" "),t("p",[t("strong",[_._v("区别")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Px 是固定的像素,一旦设置了就无法因为适应页面大小而改变")])]),_._v(" "),t("li",[t("p",[_._v("Em 和 rem 是相对长度单位,长度是不固定的,更适用于响应式")])]),_._v(" "),t("li",[t("p",[_._v("Em 是相对于其父元素来设置字体大小的,rem 是相对于根元素.")]),_._v(" "),t("p",[t("strong",[_._v("使用场景")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("对于只需要适配少部分手机设备,且分辨率对页面影响不大,使用 px")])]),_._v(" "),t("li",[t("p",[_._v("对于需要适配各种移动设备,使用 rem,例如:iphone,ipad")])])])])])])]),_._v(" "),t("h2",{attrs:{id:"_4-flex-布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-flex-布局"}},[_._v("#")]),_._v(" 4. flex 布局")]),_._v(" "),t("ul",[t("li",[_._v("Flex-direction")]),_._v(" "),t("li",[_._v("Flex-flow")]),_._v(" "),t("li",[_._v("Flex-wrap")]),_._v(" "),t("li",[_._v("Justify-content")]),_._v(" "),t("li",[_._v("Align-items")]),_._v(" "),t("li",[_._v("Align-content")])]),_._v(" "),t("h2",{attrs:{id:"_5-盒子模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-盒子模型"}},[_._v("#")]),_._v(" 5. 盒子模型")]),_._v(" "),t("p",[_._v("标准盒子:width/height=我们设置的宽高")]),_._v(" "),t("p",[_._v("怪异盒子:width/height=padding+border+width/height")]),_._v(" "),t("h2",{attrs:{id:"_6-元素水平垂直居中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-元素水平垂直居中"}},[_._v("#")]),_._v(" 6. 元素水平垂直居中")]),_._v(" "),t("ul",[t("li",[_._v("flex 布局")])]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("Display:flex;\nJustify-content:center;\nAlign-items:center\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("ul",[t("li",[_._v("Absolute+transform")])]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("position: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br")])]),t("ul",[t("li",[t("p",[_._v("Absolute+负 margin")])]),_._v(" "),t("li",[t("p",[_._v("Line-height")])])]),_._v(" "),t("h2",{attrs:{id:"_7-隐藏元素的方法有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-隐藏元素的方法有哪些"}},[_._v("#")]),_._v(" 7. 隐藏元素的方法有哪些")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Display:none")])]),_._v(" "),t("li",[t("p",[_._v("visibility:hidden")])]),_._v(" "),t("li",[t("p",[_._v("position:absolute")])]),_._v(" "),t("li",[t("p",[_._v("z-index:负值")])]),_._v(" "),t("li",[t("p",[_._v("clip-path")])]),_._v(" "),t("li",[t("p",[_._v("transform:scale(0,0)")])])]),_._v(" "),t("h2",{attrs:{id:"_8-visibility-和-display-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-visibility-和-display-的区别"}},[_._v("#")]),_._v(" 8. Visibility 和 display 的区别")]),_._v(" "),t("ul",[t("li",[_._v("visibility 设置 hidden 会隐藏元素，但是其位置还存在与页面文档流中，不会被删除，所以会触发浏览器渲染引擎的重绘")]),_._v(" "),t("li",[_._v("display 设置了 none 属性会隐藏元素，且其位置也不会被保留下来，所以会触发浏览器渲染引擎的回流和重绘。")]),_._v(" "),t("li",[_._v("opacity 会将元素设置为透明，但是其位置也在页面文档流中，不会被删除，所以会触发浏览器渲染引擎的重绘")])]),_._v(" "),t("h2",{attrs:{id:"_9-浮动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-浮动"}},[_._v("#")]),_._v(" 9. 浮动")]),_._v(" "),t("p",[t("strong",[_._v("浮动引起的问题:")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("父元素的高度无法撑开,影响与父元素同级的元素")])]),_._v(" "),t("li",[t("p",[_._v("与浮动元素同级的非浮动元素会跟随其后")])])]),_._v(" "),t("p",[t("strong",[_._v("清除浮动:")])]),_._v(" "),t("ul",[t("li",[_._v("给父级 div 定义 height 属性")]),_._v(" "),t("li",[_._v("最后一个浮动元素之后添加一个空的 div 元素,并添加 clear:both 样式")]),_._v(" "),t("li",[_._v("包含浮动元素的父级标签添加 overflow:hidden 或者 overflow:auto")]),_._v(" "),t("li",[_._v("使用:after 伪元素")])]),_._v(" "),t("h2",{attrs:{id:"_10-bfc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-bfc"}},[_._v("#")]),_._v(" 10.BFC")]),_._v(" "),t("ul",[t("li",[_._v("BFC 称为块格式化上下文,是一个独立的布局环境,可以理解为一个容器,在这个容器中按照一定规则进行物件摆放,并不会影响其他环境中的物品")]),_._v(" "),t("li",[_._v("如果一个元素符合触发 BFC 的条件,则 BFC 中的元素布局不受外部影响")])]),_._v(" "),t("p",[t("strong",[_._v("创建 BFC 的条件:")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("根元素:body")])]),_._v(" "),t("li",[t("p",[_._v("元素设置浮动:float 除 none 以外的值")])]),_._v(" "),t("li",[t("p",[_._v("元素设置绝对定位:position(absolute,fixed)")])]),_._v(" "),t("li",[t("p",[_._v("display 值为:inline-block,table-cell,table-caption,flex")])]),_._v(" "),t("li",[t("p",[_._v("overflow 值为:hidden,auto,scroll")])])]),_._v(" "),t("p",[t("strong",[_._v("BFC 的作用:")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("解决 margin 的重叠问题")])]),_._v(" "),t("li",[t("p",[_._v("解决高度塌陷问题")])]),_._v(" "),t("li",[t("p",[_._v("创建自适应两栏布局")])])]),_._v(" "),t("h2",{attrs:{id:"_11-margin-重叠"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-margin-重叠"}},[_._v("#")]),_._v(" 11. margin 重叠")]),_._v(" "),t("p",[_._v("两个块级元素的上边距和下边距可能会合并为一个外边距,其大小会取其中外边距最大的那个.浮动的元素和绝对定位这种脱离文档流的元素外边距不会重叠.")]),_._v(" "),t("p",[t("strong",[_._v("计算原则:")])]),_._v(" "),t("ul",[t("li",[_._v("如果两者是正数,取最大者")]),_._v(" "),t("li",[_._v("如果一正一负,正值减去负值的绝对值")]),_._v(" "),t("li",[_._v("两个负值,用 0 减去两个中绝对值大的那个")])]),_._v(" "),t("p",[t("strong",[_._v("解决办法:")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("兄弟之间重叠:")]),_._v(" "),t("ul",[t("li",[_._v("底部元素变为行内元素:display:inline-block")]),_._v(" "),t("li",[_._v("底部元素设置浮动:float")]),_._v(" "),t("li",[_._v("底部元素的 position 值为:absolute/fixed")])])]),_._v(" "),t("li",[t("p",[_._v("父子之间重叠:")])]),_._v(" "),t("li",[t("p",[_._v("父元素加入:overflow:hidden")])]),_._v(" "),t("li",[t("p",[_._v("父元素添加透明边框:border:1px solid transparent")])]),_._v(" "),t("li",[t("p",[_._v("子元素变为行内盒子:display:inline-block")])]),_._v(" "),t("li",[t("p",[_._v("子元素加入浮动属性或者定位")])])]),_._v(" "),t("h2",{attrs:{id:"_12-两栏式布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-两栏式布局"}},[_._v("#")]),_._v(" 12. 两栏式布局")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Float")]),_._v(" "),t("ul",[t("li",[_._v("左边: float:left")]),_._v(" "),t("li",[_._v("右边: margin-left wiidth:auto")])])]),_._v(" "),t("li",[t("p",[_._v("flex 布局")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("左边")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("flex-shrink:0;\nflex-grow:0;\nflex-basis:200px\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])]),t("p",[_._v("左边元素的放大和缩小比例设置为 0,基础大小设置为 200px")])]),_._v(" "),t("li",[t("p",[_._v("右边 flex:auto")])])])]),_._v(" "),t("li",[t("p",[_._v("绝对定位")]),_._v(" "),t("ul",[t("li",[_._v("左边:绝对定位 宽度 200px")]),_._v(" "),t("li",[_._v("右边:margin-left:200px")])])]),_._v(" "),t("li",[t("p",[_._v("绝对定位")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("左边宽度 200px")])]),_._v(" "),t("li",[t("p",[_._v("右边")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("position:absolute;\nleft:200px\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])])])])])]),_._v(" "),t("h2",{attrs:{id:"_13-三栏式布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-三栏式布局"}},[_._v("#")]),_._v(" 13. 三栏式布局")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("绝对定位:左右两栏绝对定位,中间设置对应大小的 margin 的值")])]),_._v(" "),t("li",[t("p",[_._v("Flex 布局:")])]),_._v(" "),t("li",[t("p",[_._v("父元素设置为弹性盒子")])]),_._v(" "),t("li",[t("p",[_._v("左边 order:-1 将左边移到左侧")])]),_._v(" "),t("li",[t("p",[_._v("左右两侧使用 flex-basis 设置元素本身大小")])]),_._v(" "),t("li",[t("p",[_._v("中间使用 flex-grow:1 设置占满剩余空间")])])]),_._v(" "),t("h2",{attrs:{id:"_14-定位方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-定位方式"}},[_._v("#")]),_._v(" 14.定位方式")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Static:正常文档流定位")])]),_._v(" "),t("li",[t("p",[_._v("Relative:相对定位")])]),_._v(" "),t("li",[t("p",[_._v("Absolute:绝对定位")])]),_._v(" "),t("li",[t("p",[_._v("Fixed:指定元素相对于屏幕的位置来指定元素位置")])]),_._v(" "),t("li",[t("p",[_._v("Sticky:粘性定位")])])]),_._v(" "),t("h1",{attrs:{id:"js-面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-面试题"}},[_._v("#")]),_._v(" JS 面试题")]),_._v(" "),t("h2",{attrs:{id:"_1-js-基本数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-js-基本数据类型"}},[_._v("#")]),_._v(" 1.js 基本数据类型")]),_._v(" "),t("p",[_._v("String,Boolean,Number,Null,Undefined,Object,Symbol,BigInt")]),_._v(" "),t("h2",{attrs:{id:"_2-typeof-操作符返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-typeof-操作符返回值"}},[_._v("#")]),_._v(" 2. typeof 操作符返回值")]),_._v(" "),t("ul",[t("li",[_._v("number")]),_._v(" "),t("li",[_._v("string")]),_._v(" "),t("li",[_._v("boolean")]),_._v(" "),t("li",[_._v("undefined")]),_._v(" "),t("li",[_._v("object")]),_._v(" "),t("li",[_._v("function")]),_._v(" "),t("li",[_._v("symbol")])]),_._v(" "),t("h2",{attrs:{id:"_3-var-let-const-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-var-let-const-的区别"}},[_._v("#")]),_._v(" 3.Var, let ,const 的区别")]),_._v(" "),t("ul",[t("li",[_._v("Var 声明的变量属于函数作用域,let 和 const 属于块级作用域")]),_._v(" "),t("li",[_._v("Var 存在变量提升,而 let 和 const 没有")]),_._v(" "),t("li",[_._v("Var 变量可以重复声明,值可以改变,在同一格块级作用域下,let 变量不能重复声明,const 定义的变量是常量,声明时必须赋值,且不允许重复定义,如果定义的是引用类型,可以修改数据内部结构")])]),_._v(" "),t("h2",{attrs:{id:"_4-作用域和作用域链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-作用域和作用域链"}},[_._v("#")]),_._v(" 4.作用域和作用域链")]),_._v(" "),t("p",[t("strong",[_._v("作用域:")])]),_._v(" "),t("ul",[t("li",[_._v("全局作用域:任何不在函数中或是大括号中声明的变量,都在全局作用域下,全局作用域下声明的变量可以在任意位置访问")]),_._v(" "),t("li",[_._v("函数作用域:也叫局部作用域,如果一个变量是在函数内部声明的它就在一个函数作用域下")]),_._v(" "),t("li",[_._v("块级作用域:在花括号中声明的变量")])]),_._v(" "),t("p",[t("strong",[_._v("作用域链:")])]),_._v(" "),t("p",[_._v("当在 js 中使用一个变量的时候,首先 js 引擎会尝试在当前作用域下去寻找该变量,如果没有找到,再到他的上层作用域寻找,以此类推直到找到该变量或者是已经到达了全局作用域")]),_._v(" "),t("h2",{attrs:{id:"_5-事件委托"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-事件委托"}},[_._v("#")]),_._v(" 5.事件委托")]),_._v(" "),t("p",[_._v("利用浏览器冒泡机制.在事件冒泡过程中会上传到父节点,父节点可以通过事件对象获取到目标节点,因此把子节点的监听函数定义在父节点上,由父节点的监听函数统一处理多个子元素的事件。")]),_._v(" "),t("h2",{attrs:{id:"_6-事件传播"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-事件传播"}},[_._v("#")]),_._v(" 6.事件传播")]),_._v(" "),t("p",[_._v("当事件发生在 DOM 元素上时,该事件并不完全发生在那个元素上.\n三个阶段:")]),_._v(" "),t("ul",[t("li",[_._v("捕获阶段:事件从 window 开始,然后向下到每个元素,直到到达目标事件或 event.target")]),_._v(" "),t("li",[_._v("目标阶段:事件以到达目标元素")]),_._v(" "),t("li",[_._v("冒泡阶段:事件从目标元素冒泡,然后上升到每个元素,直到到达 window")])]),_._v(" "),t("p",[t("strong",[_._v("阻止事件冒泡")])]),_._v(" "),t("ul",[t("li",[_._v("event.stopPropagation")])]),_._v(" "),t("p",[t("strong",[_._v("阻止事件默认行为")])]),_._v(" "),t("ul",[t("li",[_._v("event.preventDefault")])]),_._v(" "),t("h2",{attrs:{id:"_7-事件捕获"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-事件捕获"}},[_._v("#")]),_._v(" 7.事件捕获")]),_._v(" "),t("p",[_._v("在捕获阶段,事件从 window 开始,一直到触发事件的元素.window -> document -> html -> body -> 目标元素")]),_._v(" "),t("h2",{attrs:{id:"_8-事件冒泡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-事件冒泡"}},[_._v("#")]),_._v(" 8.事件冒泡")]),_._v(" "),t("p",[_._v("当前元素 -> body -> html -> document -> window")]),_._v(" "),t("h2",{attrs:{id:"_9-array-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-array-方法"}},[_._v("#")]),_._v(" 9. Array 方法")]),_._v(" "),t("p",[t("strong",[_._v("改变原数组的方法")])]),_._v(" "),t("ul",[t("li",[_._v("splice 添加/删除数组元素 返回新数组")]),_._v(" "),t("li",[_._v("sort 数组排序 返回排序后的数组")]),_._v(" "),t("li",[_._v("pop() 删除一个数组中的最后的一个元素 返回被删除元素")]),_._v(" "),t("li",[_._v("shift() 删除数组的第一个元素 返回被删除元素")]),_._v(" "),t("li",[_._v("unshift 向数组的开头添加一个或更多元素 返回该数组的新长度")]),_._v(" "),t("li",[_._v("push() 向数组的末尾添加元素 返回该数组的新长度")]),_._v(" "),t("li",[_._v("reverse 颠倒数组中元素的顺序 颠倒后的新数组")])]),_._v(" "),t("p",[t("strong",[_._v("不改变数组的方法")])]),_._v(" "),t("ul",[t("li",[_._v("slice() 浅拷贝数组的元素 返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象")]),_._v(" "),t("li",[_._v("join() 数组转字符串 返回生成的字符串")]),_._v(" "),t("li",[_._v("concat() 合并两个或多个数组 返回合并后的新数组")]),_._v(" "),t("li",[_._v("indexOf() 查找数组是否存在某个元素 返回下标")]),_._v(" "),t("li",[_._v("lastIndexOf() 查找指定元素在数组中的最后一个位置 方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）")]),_._v(" "),t("li",[_._v("includes() 查找数组是否包含某个元素 返回布尔")])]),_._v(" "),t("p",[t("strong",[_._v("其他方法")])]),_._v(" "),t("ul",[t("li",[_._v("map 创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。")]),_._v(" "),t("li",[_._v("filter 创建一个新数组, 其包含通过所提供函数实现的测试的所有元素")])]),_._v(" "),t("h2",{attrs:{id:"_10-闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-闭包"}},[_._v("#")]),_._v(" 10.闭包")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("函数里面声明函数,使得子函数可以访问父函数中所有的局部变量")])]),_._v(" "),t("li",[t("p",[_._v("保护变量不受外界污染,使其一直在内存中")])])]),_._v(" "),t("p",[_._v("缺点:消耗内存")]),_._v(" "),t("h2",{attrs:{id:"_11-从输入-url-地址到页面相应都发生了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-从输入-url-地址到页面相应都发生了什么"}},[_._v("#")]),_._v(" 11.从输入 url 地址到页面相应都发生了什么?")]),_._v(" "),t("ul",[t("li",[_._v("浏览器查找当前 URL 是否存在缓存，并比较缓存是否过期。")]),_._v(" "),t("li",[_._v("DNS 解析 URL 对应的 IP")]),_._v(" "),t("li",[_._v("建立 TCP 连接（三次握手）。")]),_._v(" "),t("li",[_._v("HTTP 发起请求")]),_._v(" "),t("li",[_._v("服务器处理请求,浏览器接收 HTTP 响应")]),_._v(" "),t("li",[_._v("渲染页面,构建 DOm 树")]),_._v(" "),t("li",[_._v("关闭 TCP 连接(四次握手)")])]),_._v(" "),t("h2",{attrs:{id:"_12-session、cookie、localstorage-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-session、cookie、localstorage-的区别"}},[_._v("#")]),_._v(" 12. session、cookie、localStorage 的区别")]),_._v(" "),t("ul",[t("li",[_._v("数据存储方面：cookie 在同源的 HTTP 请求里，在服务器和客户端来回传,storage 是本地保存。")]),_._v(" "),t("li",[_._v("存储数据大小：cookie 限制 4kb，storage 约 5MB。")]),_._v(" "),t("li",[_._v("数据有效期：cookie 的有效期与过期时间设置有关，sessionStorage 当前标签页有效， localStorage 始终有效。")]),_._v(" "),t("li",[_._v("作用域：cookie、localStorage 同源窗口，sessionStorage 当前标签页")])]),_._v(" "),t("h2",{attrs:{id:"_13-常见异步任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-常见异步任务"}},[_._v("#")]),_._v(" 13. 常见异步任务")]),_._v(" "),t("p",[_._v("定时器,ajax,回调函数,async await,promise，事件绑定")]),_._v(" "),t("h2",{attrs:{id:"_14-this-指向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-this-指向"}},[_._v("#")]),_._v(" 14.this 指向")]),_._v(" "),t("ul",[t("li",[_._v("全局环境指向 window")]),_._v(" "),t("li",[_._v("全局调用函数指向 window")]),_._v(" "),t("li",[_._v("对象调用函数指向对象")]),_._v(" "),t("li",[_._v("箭头函数指向外部的 this")])]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("函数形式              fun()  ->window\n方法形式调用          obj.sayName()  ->obj\n构造函数              new Test()     ->新创建的对象\nCall,apply,bind       p.call(obj)    -> obj\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br")])]),t("h2",{attrs:{id:"_15-http-协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-http-协议"}},[_._v("#")]),_._v(" 15. http 协议")]),_._v(" "),t("p",[_._v("五层网络模型")]),_._v(" "),t("ul",[t("li",[_._v("物理层：主要作用是定义物理设备如何传输数据传输层")]),_._v(" "),t("li",[_._v("数据链路层：在通信的实体间建立数据链路连接")]),_._v(" "),t("li",[_._v("网络层：为数据在结点之间传输创建逻辑链路")]),_._v(" "),t("li",[_._v("传输层：向用户提供可靠的端到端（End-to-End）服务，传输层向高层屏蔽了下层数据通信的细节")]),_._v(" "),t("li",[_._v("应用层：为应用软件提供了很多服务，构建于 TCP 协议之上，屏蔽网络传输相关细节")])]),_._v(" "),t("h2",{attrs:{id:"_16-跨域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-跨域"}},[_._v("#")]),_._v(" 16. 跨域")]),_._v(" "),t("p",[_._v("同源策略(协议,端口,域名相同)")]),_._v(" "),t("p",[t("strong",[_._v("解决跨域")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("jsonp")])]),_._v(" "),t("li",[t("p",[_._v("iframe")])]),_._v(" "),t("li",[t("p",[_._v("cors 服务器设置 Access-Control-Allow-Origin HTTP 响应头")])]),_._v(" "),t("li",[t("p",[_._v("window.postMessage")])]),_._v(" "),t("li",[t("p",[_._v("Nginx 反向代理\n这种方式目前使用相当普遍，就是在目标服务器和浏览器中间架一层服务器，我们称该服务器为代理服务器。方向代理的方式就是把静态的资源文件部署在代理服务器上，那么我们请求的时候，输入的是代理服务器的域，在静态的 html 的文件被加载后，要发起的 ajax 请求本来应该是直接发到目标服务器的，但是这样一来就会跨域，从而被限制，那么我们修改一下策略，让 ajax 的请求直接请求到代理服务器，然后代理服务器转发该请求到目标服务器去拿到资源。这样一来，对于浏览器端而言，并没有发生跨域。所以关键是需要在代理服务器上部署转发请求的逻辑。")])]),_._v(" "),t("li",[t("p",[_._v("node.js 中间件代理")])])]),_._v(" "),t("h2",{attrs:{id:"_17-http-和-https-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-http-和-https-的区别"}},[_._v("#")]),_._v(" 17. http 和 https 的区别")]),_._v(" "),t("ul",[t("li",[_._v("http 的 url 由 http://起始默认使用 80 端口,https 由 https 起始且默认使用 443 端口")]),_._v(" "),t("li",[_._v("http 是超文本传输协议,信息是明文传输,https 是 ssl 加密传输协议")]),_._v(" "),t("li",[_._v("http 的连接是无状态的,https 是由 ssl+http 协议构建的可进行加密传输,身份认证的网络协议,比 http 安全")])]),_._v(" "),t("h2",{attrs:{id:"_18-get-请求和-post-请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-get-请求和-post-请求"}},[_._v("#")]),_._v(" 18. Get 请求和 post 请求")]),_._v(" "),t("p",[t("strong",[_._v("Get 请求:")])]),_._v(" "),t("ul",[t("li",[_._v("用于获取数据")]),_._v(" "),t("li",[_._v("把参数拼接在 URL 后面,发送给服务器")]),_._v(" "),t("li",[_._v("大小有限制")])]),_._v(" "),t("p",[t("strong",[_._v("Post 请求")])]),_._v(" "),t("ul",[t("li",[_._v("传递参数,把参数放在请求体中,发送给服务器")]),_._v(" "),t("li",[_._v("对大小没有要求")]),_._v(" "),t("li",[_._v("安全性高")])]),_._v(" "),t("h2",{attrs:{id:"_19-ajax-状态码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-ajax-状态码"}},[_._v("#")]),_._v(" 19.ajax 状态码")]),_._v(" "),t("ul",[t("li",[_._v("200 响应成功")]),_._v(" "),t("li",[_._v("401 权限不足")]),_._v(" "),t("li",[_._v("400 客户端请求有语法错误，不能被服务器识别")]),_._v(" "),t("li",[_._v("403 禁止访问")]),_._v(" "),t("li",[_._v("404 请求资源不存在")]),_._v(" "),t("li",[_._v("500 服务器内部错误")])]),_._v(" "),t("h2",{attrs:{id:"_20-图片压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-图片压缩"}},[_._v("#")]),_._v(" 20.图片压缩")]),_._v(" "),t("p",[_._v("Base64,canvas,图片懒加载")]),_._v(" "),t("h2",{attrs:{id:"_21-原型与原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-原型与原型链"}},[_._v("#")]),_._v(" 21. 原型与原型链")]),_._v(" "),t("p",[t("strong",[_._v("原型")])]),_._v(" "),t("p",[_._v("创建一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象，普通函数没有 prototype，但有—proto—属性")]),_._v(" "),t("p",[t("strong",[_._v("原型链")])]),_._v(" "),t("p",[_._v("当对象查找一个属性的时候,如果没有在自身找到,那么就会查找自身的原型,如果原型还没有找到,那么会继续查找原型的原型,直到找到 Object.prototype 的原型时,此时原型为 null,查找停止.")]),_._v(" "),t("h2",{attrs:{id:"_22-深拷贝和浅拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-深拷贝和浅拷贝"}},[_._v("#")]),_._v(" 22. 深拷贝和浅拷贝")]),_._v(" "),t("p",[t("strong",[_._v("浅拷贝")])]),_._v(" "),t("p",[_._v("浅拷贝是对内存地址的复制，如果原地址中对象被改变了，那么浅复制出来的对象也会相应改变")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("自定义函数")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("function simpleCopy(initObj){\n    var obj={}\n    for(var i in initObj){\n    obj[i]=initObj[i]\n    }\n    return obj;\n}\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br")])])]),_._v(" "),t("li",[t("p",[_._v("Object.assign")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("let newObj=Object.assign({},obj)\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])])]),_._v(" "),t("li",[t("p",[_._v("ES6 的对象扩展")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("let newObj={...obj}\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])])])]),_._v(" "),t("p",[t("strong",[_._v("深拷贝")])]),_._v(" "),t("p",[_._v("是指拷贝对象的具体内容，而内存地址是自主分配的，拷贝结束之后，两个对象虽然存的值是相同的，但是内存地址不一样，两个对象也互不影响，互不干涉")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("let newObj=JSON.parse(JSON.stringify(obj))\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("h2",{attrs:{id:"_23-和-区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-和-区别是什么"}},[_._v("#")]),_._v(" 23. == 和===区别是什么？")]),_._v(" "),t("ul",[t("li",[_._v("==返回一个布尔值，相等返回 true，不相等返回 false；允许不同数据类型直接的比较；如果是不同类型的数据进行比较时，会默认进行数据类型直接的转换，如果是对象数据类型的比较，比较的是空间地址")]),_._v(" "),t("li",[_._v("只要数据类型不一样，就会返回 false")])]),_._v(" "),t("h2",{attrs:{id:"_24-call-bind-apply-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-call-bind-apply-的区别"}},[_._v("#")]),_._v(" 24.call bind apply 的区别")]),_._v(" "),t("ul",[t("li",[_._v("call 和 apply 是直接调用函数，第一个参数是改变 this 指向的对象结果值")]),_._v(" "),t("li",[_._v("call 第二个参数开始，后续所有参数就是传入该函数的值，跟普通函数传参一样")]),_._v(" "),t("li",[_._v("apply 第二个参数是数组，该数组就是该函数的实参")]),_._v(" "),t("li",[_._v("bind 不会立即调用函数，而是返回一个改变 this 指向后的函数，然后再调用，参数跟 call 相同")]),_._v(" "),t("li",[_._v("如果不想改变 this 指向了，第一个参数传入 null，指向 window")])]),_._v(" "),t("h2",{attrs:{id:"_25-定义函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-定义函数"}},[_._v("#")]),_._v(" 25. 定义函数")]),_._v(" "),t("ul",[t("li",[_._v("函数声明 function name(){}")]),_._v(" "),t("li",[_._v("函数表达式 var name=function (){}")]),_._v(" "),t("li",[_._v("new 实例化")])]),_._v(" "),t("h2",{attrs:{id:"_26-null-与-undefined-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-null-与-undefined-的区别"}},[_._v("#")]),_._v(" 26. null 与 undefined 的区别")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("null 表示一个对象被定义了，值为“空值”；")])]),_._v(" "),t("li",[t("p",[_._v("undefined 表示不存在这个值。")])])]),_._v(" "),t("h2",{attrs:{id:"_27-同步和异步的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-同步和异步的区别"}},[_._v("#")]),_._v(" 27.同步和异步的区别")]),_._v(" "),t("p",[t("strong",[_._v("同步")])]),_._v(" "),t("ul",[t("li",[_._v("同步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，那么这个进程会一直等待下去，直到消息返回为止再继续向下执行。")])]),_._v(" "),t("p",[t("strong",[_._v("异步")])]),_._v(" "),t("ul",[t("li",[_._v("异步指的是当一个进程在执行某个请求的时候，如果这个请求需要等待一段时间才能返回，这个时候进程会继续往下执行，不会阻塞等待消息的返回，当消息返回时系统再通知进程进行处理")])]),_._v(" "),t("p",[t("strong",[_._v("异步操作")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("setTimeout(setInterval)")])]),_._v(" "),t("li",[t("p",[_._v("ajax")])]),_._v(" "),t("li",[t("p",[_._v("promise")])]),_._v(" "),t("li",[t("p",[_._v("async/await")])]),_._v(" "),t("li",[t("p",[_._v("回调函数")])]),_._v(" "),t("li",[t("p",[_._v("事件绑定")])])]),_._v(" "),t("h2",{attrs:{id:"_28-如何判断是否是数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-如何判断是否是数组"}},[_._v("#")]),_._v(" 28. 如何判断是否是数组？")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Array.isArray")])]),_._v(" "),t("li",[t("p",[_._v("instanceof")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("arr instanceof Array\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])])]),_._v(" "),t("li",[t("p",[_._v("constructor")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("arr.constructor === Array\narr.__proto__.constructor === Array\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])])]),_._v(" "),t("li",[t("p",[_._v("Object.prototype.toString")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("Object.prototype.toString.call(arr) === '[object Array]'\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])])])]),_._v(" "),t("h2",{attrs:{id:"_29-new-一个对象的过程中发生了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-new-一个对象的过程中发生了什么"}},[_._v("#")]),_._v(" 29. new 一个对象的过程中发生了什么")]),_._v(" "),t("ol",[t("li",[_._v("创建空对象；\nvar obj = {};")]),_._v(" "),t("li",[_._v("设置新对象的 constructor 属性为构造函数的名称，设置新对象的"),t("strong",[_._v("proto")]),_._v("属性指向构造函数的 prototype 对象；\nobj."),t("strong",[_._v("proto")]),_._v(" = ClassA.prototype;")]),_._v(" "),t("li",[_._v("使用新对象调用函数，函数中的 this 被指向新实例对象：\nClassA.call(obj);//{}.构造函数();")]),_._v(" "),t("li",[_._v("将初始化完毕的新对象地址，保存到等号左边的变量中")])]),_._v(" "),t("h2",{attrs:{id:"_30-js-延迟加载的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-js-延迟加载的方式"}},[_._v("#")]),_._v(" 30. js 延迟加载的方式")]),_._v(" "),t("ol",[t("li",[_._v("将 js 脚本放在文档底部，来使 js 脚本尽可能的在最后来加载执行")]),_._v(" "),t("li",[_._v("给 js 脚本添加 defer 属性")]),_._v(" "),t("li",[_._v("给 js 脚本添加 async 属性")]),_._v(" "),t("li",[_._v("动态创建 DOM 标签的方式")])]),_._v(" "),t("h2",{attrs:{id:"_31-防抖与节流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-防抖与节流"}},[_._v("#")]),_._v(" 31. 防抖与节流")]),_._v(" "),t("p",[t("strong",[_._v("防抖")])]),_._v(" "),t("p",[_._v("在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。使用在点击请求的事件上，避免因为用户的多次点击向后端发送多次请求")]),_._v(" "),t("p",[t("strong",[_._v("节流")])]),_._v(" "),t("p",[_._v("规定一个单位时间内，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。scroll 函数的事件监听")]),_._v(" "),t("h2",{attrs:{id:"_32-内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-内存泄漏"}},[_._v("#")]),_._v(" 32. 内存泄漏")]),_._v(" "),t("ol",[t("li",[_._v("意外的全局变量")]),_._v(" "),t("li",[_._v("被遗忘的计时器或回调函数")]),_._v(" "),t("li",[_._v("脱离 dom 的引用")]),_._v(" "),t("li",[_._v("闭包")])]),_._v(" "),t("h2",{attrs:{id:"_33-垃圾回收机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33-垃圾回收机制"}},[_._v("#")]),_._v(" 33.垃圾回收机制")]),_._v(" "),t("h2",{attrs:{id:"_34-数组去重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34-数组去重"}},[_._v("#")]),_._v(" 34.数组去重")]),_._v(" "),t("ul",[t("li",[_._v("indexof if (array .indexOf(arr[i]) === -1)")]),_._v(" "),t("li",[_._v("new Set Array.from(new Set(arr))")]),_._v(" "),t("li",[_._v("includes if( !array.includes( arr[i]) )")]),_._v(" "),t("li",[_._v("sort")])]),_._v(" "),t("h2",{attrs:{id:"_35-前端安全问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35-前端安全问题"}},[_._v("#")]),_._v(" 35.前端安全问题")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("XSS")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("解决方案：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("对用户的输入进行过滤")])]),_._v(" "),t("li",[t("p",[_._v("根据输出数据所在的上下文来进行相应的编码")])]),_._v(" "),t("li",[t("p",[_._v("在 cookie 中设置 HttpOnly 属性，使 js 脚本无法读取到 cookie 信息")])])])])])]),_._v(" "),t("li",[t("p",[_._v("csrf")]),_._v(" "),t("ul",[t("li",[_._v("解决方案\n"),t("ul",[t("li",[_._v("使用 token")]),_._v(" "),t("li",[_._v("referer 验证")]),_._v(" "),t("li",[_._v("使用验证码")])])])])]),_._v(" "),t("li",[t("p",[_._v("点击劫持")]),_._v(" "),t("ul",[t("li",[_._v("解决方案：\n"),t("ul",[t("li",[_._v("设置 http 响应头 X-Frame-Options")]),_._v(" "),t("li",[_._v("使用 CSP(Content Security Policy)内容安全策略")])])])])]),_._v(" "),t("li",[t("p",[_._v("不安全的第三方依赖")]),_._v(" "),t("ul",[t("li",[_._v("解决方案：\n"),t("ul",[t("li",[_._v("尽量减少第三方依赖，选用相对成熟的依赖包")]),_._v(" "),t("li",[_._v("使用自动化工具检查这些第三方代码有没有安全问题")])])])])]),_._v(" "),t("li",[t("p",[_._v("本地存储数据泄露")]),_._v(" "),t("ul",[t("li",[_._v("解决方案：\n"),t("ul",[t("li",[_._v("不在本地存储重要数据")]),_._v(" "),t("li",[_._v("加密")])])])])])]),_._v(" "),t("h2",{attrs:{id:"_36-js-对象的几种创建方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36-js-对象的几种创建方式"}},[_._v("#")]),_._v(" 36.js 对象的几种创建方式")]),_._v(" "),t("h2",{attrs:{id:"_37-高并发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37-高并发"}},[_._v("#")]),_._v(" 37.高并发")]),_._v(" "),t("ul",[t("li",[_._v("减少 http 请求，减少 css，js,image 等组件的请求数")]),_._v(" "),t("li",[_._v("添加异步请求")]),_._v(" "),t("li",[_._v("启用浏览器缓存和文件压缩")]),_._v(" "),t("li",[_._v("cdn 加速")]),_._v(" "),t("li",[_._v("建立独立的图片服务器")])]),_._v(" "),t("h2",{attrs:{id:"_38-宏任务和微任务分别有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_38-宏任务和微任务分别有哪些"}},[_._v("#")]),_._v(" 38.宏任务和微任务分别有哪些")]),_._v(" "),t("ul",[t("li",[_._v("微任务包括： promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。")]),_._v(" "),t("li",[_._v("宏任务包括： script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲染等")])]),_._v(" "),t("h1",{attrs:{id:"es6-面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6-面试题"}},[_._v("#")]),_._v(" ES6 面试题")]),_._v(" "),t("h2",{attrs:{id:"_1-es6-新特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-es6-新特性"}},[_._v("#")]),_._v(" 1.ES6 新特性")]),_._v(" "),t("ul",[t("li",[_._v("块作用域")]),_._v(" "),t("li",[_._v("类")]),_._v(" "),t("li",[_._v("箭头函数")]),_._v(" "),t("li",[_._v("模板字符串")]),_._v(" "),t("li",[_._v("加强的对象字面")]),_._v(" "),t("li",[_._v("对象解构")]),_._v(" "),t("li",[_._v("Promise")]),_._v(" "),t("li",[_._v("模块")]),_._v(" "),t("li",[_._v("Symbol")]),_._v(" "),t("li",[_._v("代理（proxy）Set")]),_._v(" "),t("li",[_._v("函数默认参数")]),_._v(" "),t("li",[_._v("rest 和展开")])]),_._v(" "),t("h2",{attrs:{id:"_3-几种模块规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-几种模块规范"}},[_._v("#")]),_._v(" 3. 几种模块规范")]),_._v(" "),t("p",[t("strong",[_._v("模块化")])]),_._v(" "),t("ul",[t("li",[_._v("将一个复杂的程序依据一定的规范封装成几个块（文件），并进行组合在一起")]),_._v(" "),t("li",[_._v("块的内部数据与实现是私有的，只是向外部暴露一些方法与外部模块通信")])]),_._v(" "),t("p",[t("strong",[_._v("模块规范")])]),_._v(" "),t("ul",[t("li",[_._v("CommonJS 方案，它通过 require 来引入模块。通过 module.exports 定义模块的输出接口。这种模块加载方案是服务端的解决方案，它是以同步的方式来引入模块的，因为在服务端文件存储在本地磁盘，所以读取非常快，所以以同步的方式加载更合适")]),_._v(" "),t("li",[_._v("AMD 方案，这种方案是采用异步加载的方式来加载模块，模块的加载不影响后面语句的执行，所有依赖这个模块的语句都定义在一个回调函数里，等到加载完成后再执行回调函数。require.js 实现了 AMD 规范")]),_._v(" "),t("li",[_._v("CMD 方案，这种方案和 AMD 方案都是为了解决异步模块加载的问题，sea.js 实现了 CMD 规范。它和 require.js 区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同")]),_._v(" "),t("li",[_._v("ES6 提出的 import 和 export 形式来导入导出模块")])]),_._v(" "),t("h2",{attrs:{id:"_4-箭头函数和普通函数的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-箭头函数和普通函数的区别"}},[_._v("#")]),_._v(" 4.箭头函数和普通函数的区别")]),_._v(" "),t("ul",[t("li",[_._v("普通函数的 this 指向调用他的那个对象")]),_._v(" "),t("li",[_._v("箭头函数不能作为构造函数，不能使用 new，没有 this，arguments")]),_._v(" "),t("li",[_._v("箭头函数的 this 永远指向其上下文的 this，任何方法都改变不了")])]),_._v(" "),t("h2",{attrs:{id:"_5-promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-promise"}},[_._v("#")]),_._v(" 5.promise")]),_._v(" "),t("p",[t("strong",[_._v("基本特征")])]),_._v(" "),t("ol",[t("li",[_._v("有 3 种状态：pending（进行中）、fulfilled（已成功）、rejected（已失败）")]),_._v(" "),t("li",[_._v("接收一个回调函数作为参数，回调函数接收 2 格参数，resolve 成功时的回调，reject 失败时的回调")]),_._v(" "),t("li",[_._v("finally 方法不管 promise 状态如何都会执行")])]),_._v(" "),t("p",[t("strong",[_._v("如何改变 Promise 对象的状态")])]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("resolve() // pending => fulfilled\nreject() // pending => rejected\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("p",[t("strong",[_._v("优点")])]),_._v(" "),t("ol",[t("li",[_._v("统一异步 API")]),_._v(" "),t("li",[_._v("解决回调地狱的问题")]),_._v(" "),t("li",[_._v("更好的处理错误")])]),_._v(" "),t("p",[t("strong",[_._v("缺点")])]),_._v(" "),t("ol",[t("li",[_._v("无法取消 promise，一旦建立立即执行，中兔无法取消")]),_._v(" "),t("li",[_._v("如果不设置回调函数，promise 内部跑出的错误，不会反应到外部")]),_._v(" "),t("li",[_._v("当处于 pending 状态时，无法得知目前进展到哪一步")]),_._v(" "),t("li",[_._v("promise 真正执行回调的时候，定义 promise 那部分实际上已经走完了，所以 Promise 的报错堆栈上下文不太友好，")])]),_._v(" "),t("h2",{attrs:{id:"_6-继承的-6-种方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-继承的-6-种方法"}},[_._v("#")]),_._v(" 6.继承的 6 种方法")]),_._v(" "),t("ol",[t("li",[_._v("构造函数继承 （call,apply)")]),_._v(" "),t("li",[_._v("原型继承 将子类的原型挂载到父类上")]),_._v(" "),t("li",[_._v("组合继承")]),_._v(" "),t("li",[_._v("寄生组合继承")]),_._v(" "),t("li",[_._v("class 继承")])]),_._v(" "),t("h1",{attrs:{id:"vue-面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-面试题"}},[_._v("#")]),_._v(" vue 面试题")]),_._v(" "),t("h2",{attrs:{id:"_1-spa-单页面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-spa-单页面"}},[_._v("#")]),_._v(" 1. spa 单页面")]),_._v(" "),t("p",[t("strong",[_._v("优点")])]),_._v(" "),t("ul",[t("li",[_._v("用户体验好,内容的改变不需要重新加载整个页面")]),_._v(" "),t("li",[_._v("相对服务器压力小")]),_._v(" "),t("li",[_._v("前后端职责分离,架构清晰")])]),_._v(" "),t("p",[t("strong",[_._v("缺点:")])]),_._v(" "),t("ul",[t("li",[_._v("初次加载耗时多,需要在加载页面时,将 js,css 统一加载")]),_._v(" "),t("li",[_._v("单页面在一个页面显示所有的内容,所以不能用浏览器的前进后退功能.")])]),_._v(" "),t("h2",{attrs:{id:"_2-vue-组件中-data-为什么必须是一个函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue-组件中-data-为什么必须是一个函数"}},[_._v("#")]),_._v(" 2. Vue 组件中,data 为什么必须是一个函数?")]),_._v(" "),t("p",[_._v("因为组件是用来复用的,且 JS 里对象是引用关系,如果组件中 data 是一个对象,那么这样作用域没有隔离,子组件中的 data 属性值会相互影响,如果 data 选项是一个函数,那么每个实例可以维护一份被返回对象的独立拷贝,组件实例直接的 data 属性值不会相互影响,而 new Vue 的实例,是不会被复用的,因此不存在引用对象的问题.")]),_._v(" "),t("h2",{attrs:{id:"_3-computed-和-watch-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-computed-和-watch-的区别"}},[_._v("#")]),_._v(" 3. Computed 和 watch 的区别")]),_._v(" "),t("ul",[t("li",[_._v("Computed:只有当依赖的数据变化时才会计算,当数据没有变化时,它会读取缓存数据,如果一个数据依赖于其他数据,使用 computed")]),_._v(" "),t("li",[_._v("Watch:每次都需要执行函数,watch 更适用于数据变化时的异步操作,如果需要在某个数据变化时做一些事情,使用 watch")])]),_._v(" "),t("h2",{attrs:{id:"_4-v-model-中的实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-v-model-中的实现原理"}},[_._v("#")]),_._v(" 4. V-model 中的实现原理")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v('Value+input的语法糖相当于\n<input v-bind:value="something" v-on:input="something = $event.target.value">\n')])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br")])]),t("h2",{attrs:{id:"_5-vue-的双向绑定数据的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue-的双向绑定数据的原理"}},[_._v("#")]),_._v(" 5. Vue 的双向绑定数据的原理")]),_._v(" "),t("p",[_._v("Vue.js 是采用数据劫持结合发布者-订阅者模式的方式,通过 object.defineProperty 来劫持各个属性的 setter,getter,在数据变动时发布消息给订阅者,触发相应的监听回调")]),_._v(" "),t("h2",{attrs:{id:"_6-生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-生命周期"}},[_._v("#")]),_._v(" 6.生命周期")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("beforeCreate:实例创建之初")])]),_._v(" "),t("li",[t("p",[_._v("Created:实例创建完成 可以拿到 data")])]),_._v(" "),t("li",[t("p",[_._v("beforeMount:挂载前")])]),_._v(" "),t("li",[t("p",[_._v("mounted:实例挂载后,可以获取 dom 节点")])]),_._v(" "),t("li",[t("p",[_._v("BeforeUpdate:响应数据更新时")])]),_._v(" "),t("li",[t("p",[_._v("Updated:组件数据更新之后")])]),_._v(" "),t("li",[t("p",[_._v("beforeDestory:组件销毁前")])]),_._v(" "),t("li",[t("p",[_._v("destoryed:组件销毁后调用")])])]),_._v(" "),t("h2",{attrs:{id:"_7-v-show-和-v-if-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-v-show-和-v-if-的区别"}},[_._v("#")]),_._v(" 7. v-show 和 v-if 的区别")]),_._v(" "),t("p",[_._v("v-if 是删除生成 dom,v-show 是切换 dispaly 的状态，v-show 适用于频繁切换条件的场景")]),_._v(" "),t("h2",{attrs:{id:"_8-v-for-和-v-if-为什么不能连用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-v-for-和-v-if-为什么不能连用"}},[_._v("#")]),_._v(" 8. v-for 和 v-if 为什么不能连用?")]),_._v(" "),t("p",[_._v("V-for 会比 v-if 的优先级更高,连用的话会把 v-if 放入每个元素都添加一下,造成性能问题")]),_._v(" "),t("h2",{attrs:{id:"_9-vue-修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-vue-修饰符"}},[_._v("#")]),_._v(" 9.vue 修饰符")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Stop:阻止事件冒泡")])]),_._v(" "),t("li",[t("p",[_._v("Prevent:阻止事件的默认行为")])]),_._v(" "),t("li",[t("p",[_._v("Capture:事件捕获由外到内")])]),_._v(" "),t("li",[t("p",[_._v("Once:只触发一次")])]),_._v(" "),t("li",[t("p",[_._v("Self:只触发自己的事件行为时,才会执行")])])]),_._v(" "),t("h2",{attrs:{id:"_10-key-的作用是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-key-的作用是什么"}},[_._v("#")]),_._v(" 10.key 的作用是什么")]),_._v(" "),t("p",[_._v("使用 v-for 更新已渲染的元素列表时,默认用就地复用策略;列表数据修改的时候,他会根据 key 值去判断某个值是否修改,如果修改,则重新渲染这一项,否则复用之前的元素")]),_._v(" "),t("h2",{attrs:{id:"_11-keep-alive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-keep-alive"}},[_._v("#")]),_._v(" 11.keep-alive")]),_._v(" "),t("p",[_._v("一般结合路由和动态组件一起使用，用于缓存组件；")]),_._v(" "),t("ul",[t("li",[_._v("Include 属性 只有名称匹配的组件会被缓存")]),_._v(" "),t("li",[_._v("Exclude 属性 任何名称匹配的组件都不会被缓存")]),_._v(" "),t("li",[_._v("Exclude 比 include 优先级高")]),_._v(" "),t("li",[_._v("对应钩子 activated:组件被激活时 deactivated:组件移除时")])]),_._v(" "),t("h2",{attrs:{id:"_12-vue-事件绑定原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-vue-事件绑定原理"}},[_._v("#")]),_._v(" 12.vue 事件绑定原理")]),_._v(" "),t("ul",[t("li",[_._v("原生事件绑定是通过 addEventListener 绑定给真实元素的，组件事件绑定是通过 Vue 自定义的"),t("code",[_._v("$on")]),_._v("实现的。")])]),_._v(" "),t("h2",{attrs:{id:"_13-vue-中是如何检测数组变化的呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-vue-中是如何检测数组变化的呢"}},[_._v("#")]),_._v(" 13. vue 中是如何检测数组变化的呢")]),_._v(" "),t("ul",[t("li",[_._v("使用了函数劫持的方式，重写了数组的方法，Vue 将 data 中的数组进行了原型链重写，指向了自己定义的数组原型方法，当调用数组 api 时，可以通知依赖更新。")]),_._v(" "),t("li",[_._v("如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。")])]),_._v(" "),t("h2",{attrs:{id:"_14-nexttick"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-nexttick"}},[_._v("#")]),_._v(" 14. $nextTick")]),_._v(" "),t("h3",{attrs:{id:"使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[_._v("#")]),_._v(" 使用场景")]),_._v(" "),t("p",[_._v("一个子组件通过 v-if 控制隐藏显示，当修改完显示状态后，立马通过 ref 去操作子组件的方法，这个时候会报错，原因在于子组件此时可能还未渲染完成，这个时候使用 nextTick 可以解决，他会在 dom 更新完成之后再去调用。")]),_._v(" "),t("h3",{attrs:{id:"实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[_._v("#")]),_._v(" 实现原理")]),_._v(" "),t("ul",[t("li",[_._v("在下次 DOM 更新循环结束之后执行延迟回调")]),_._v(" "),t("li",[_._v("nextTick 主要使用了宏任务和微任务")]),_._v(" "),t("li",[_._v("根据执行环境分别尝试采用 promise，MutationObserver，setImmediate,如果以上都不行，则采用 setTimeout 定义一个异步方法，多次调用 nextTick 会将方法放入队列中，通过这个异步方法清空当前队列")])]),_._v(" "),t("h3",{attrs:{id:"作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[_._v("#")]),_._v(" 作用：")]),_._v(" "),t("p",[_._v("在 Vue 生命周期的 created()钩子函数进行的 DOM 操作一定要放在 Vue.nextTick()的回调函数中。原因是什么呢，原因是在 created()钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的 js 代码放进 Vue.nextTick()的回调函数中")]),_._v(" "),t("h2",{attrs:{id:"_15-组件通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-组件通信"}},[_._v("#")]),_._v(" 15. 组件通信")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Props:父组件向子组件传递数据")])]),_._v(" "),t("li",[t("p",[_._v("$emit:子组件向父组件传值")])]),_._v(" "),t("li",[t("p",[_._v("Ref:用在子组件上,指向子组件实例,可以访问组件的数据和方法")])]),_._v(" "),t("li",[t("p",[_._v("$parent:访问上一级父组件的属性和方法")])]),_._v(" "),t("li",[t("p",[_._v("$children:访问子组件的实例")])]),_._v(" "),t("li",[t("p",[_._v("$attrs:继承所有的父组件属性")])]),_._v(" "),t("li",[t("p",[_._v("$listeners:包含了父作用域中的事件监听器")])]),_._v(" "),t("li",[t("p",[_._v("Provide 父组件中通过 provide 来提供变量")])]),_._v(" "),t("li",[t("p",[_._v("Inject 然后再子组件中通过 inject 来注入变量")])]),_._v(" "),t("li",[t("p",[_._v("EventBus：用于跨组件通知")])])]),_._v(" "),t("h2",{attrs:{id:"_16-vue-的单向数据流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-vue-的单向数据流"}},[_._v("#")]),_._v(" 16.Vue 的单向数据流")]),_._v(" "),t("p",[_._v("所有的 prop 都使得其父子 prop 之间形成一个单向下行绑定,父级 prop 的更新会向下流动到子组件中,但是反过来不行,这样会防止子组件意外改变父级组件的状态,从而导致你的应用的数据流难以理解")]),_._v(" "),t("h2",{attrs:{id:"_17-vuex"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-vuex"}},[_._v("#")]),_._v(" 17. Vuex")]),_._v(" "),t("ul",[t("li",[_._v("State:定义了应用状态的数据结构,可以在这里设置默认的初始状态")]),_._v(" "),t("li",[_._v("Getter:可以对 state 进行计算操作，主要用来过滤一些数据，可以在多组件之间复用")]),_._v(" "),t("li",[_._v("Mutations:定义的方法动态修改 state 中的数据，通过 commit 提交方法，方法必须是同步的")]),_._v(" "),t("li",[_._v("Actions：提交的是 mutation，而不是直接变更状态，可以包含任意异步操作")]),_._v(" "),t("li",[_._v("Modules:类似于命名空间，用于项目中将各个模块的状态分开定义和操作，便于维护")])]),_._v(" "),t("p",[_._v("场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车")]),_._v(" "),t("h2",{attrs:{id:"_18-vue-路由-hash-模式和-history-模式实现原理分别是什么-他们的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-vue-路由-hash-模式和-history-模式实现原理分别是什么-他们的区别是什么"}},[_._v("#")]),_._v(" 18.vue 路由 hash 模式和 history 模式实现原理分别是什么，他们的区别是什么？")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("hash 模式：")]),_._v(" "),t("ul",[t("li",[_._v("即地址栏 URL 中的#符号")]),_._v(" "),t("li",[_._v("hash 虽然出现 URL 中，但不会被包含在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面")])])]),_._v(" "),t("li",[t("p",[_._v("history 模式：")]),_._v(" "),t("ul",[t("li",[_._v("利用了 HTML5 History Interface 中新增的 pushState() 和 replaceState() 方法")])])]),_._v(" "),t("li",[t("p",[_._v("区别")]),_._v(" "),t("ul",[t("li",[_._v("url 展示上，hash 模式有“#”，history 模式没有")]),_._v(" "),t("li",[_._v("刷新页面时，hash 模式可以正常加载到 hash 值对应的页面，而 history 没有处理的话，会返回 404，一般需要后端将所有页面都配置重定向到首页路由")]),_._v(" "),t("li",[_._v("兼容性，hash 可以支持低版本浏览器和 IE。")])])])]),_._v(" "),t("h2",{attrs:{id:"_19-route和-router-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-route和-router-的区别"}},[_._v("#")]),_._v(" 19. $route和$router 的区别")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("$route:路由信息对象,包括 path,params,hash,query,fullPath,name 等")])]),_._v(" "),t("li",[t("p",[_._v("$router:路由实例,包括路由跳转方法,钩子函数")])])]),_._v(" "),t("h2",{attrs:{id:"_20-动态路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-动态路由"}},[_._v("#")]),_._v(" 20.动态路由")]),_._v(" "),t("ul",[t("li",[_._v("Params:\n配置路由:/router/:id\n获取:$route.params.id")]),_._v(" "),t("li",[_._v("query 方式:\n配置路由:/router"),t("br"),_._v("\n获取参数:$route.query.id")])]),_._v(" "),t("h2",{attrs:{id:"_21-路由守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-路由守卫"}},[_._v("#")]),_._v(" 21.路由守卫")]),_._v(" "),t("ul",[t("li",[_._v("全局前置/钩子：beforeEach、beforeResolve、afterEach\n"),t("ul",[t("li",[t("strong",[_._v("to")]),_._v("：route 即将进入的目标路由对象，")]),_._v(" "),t("li",[t("strong",[_._v("from")]),_._v("：route 当前导航正要离开的路由")]),_._v(" "),t("li",[t("strong",[_._v("next")]),_._v("：function 一定要调用该方法 resolve 这个钩子。执行效果依赖 next 方法的调用参数。可以控制网页的跳转。")])])]),_._v(" "),t("li",[_._v("路由独享的守卫：beforeEnter")]),_._v(" "),t("li",[_._v("组件内的守卫：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave")])]),_._v(" "),t("h2",{attrs:{id:"_22-mvvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-mvvm"}},[_._v("#")]),_._v(" 22. MVVM")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Model 代表数据模型，View 代表 ui 组件，ViewModel 将 Model 和 View 关联起来")])]),_._v(" "),t("li",[t("p",[_._v("数据会绑定到 ViewModel 层并自动将数据渲染到页面，视图变化的时候会通知 ViewModel 层更新数据")])])]),_._v(" "),t("h2",{attrs:{id:"_23-diff-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-diff-算法"}},[_._v("#")]),_._v(" 23. diff 算法")]),_._v(" "),t("ul",[t("li",[_._v("同级比较，再比较子节点")]),_._v(" "),t("li",[_._v("先判断一方有子节点一方没有子节点的情况(如果新的 children 没有子节点，将旧的子节点移除)")]),_._v(" "),t("li",[_._v("比较都有子节点的情况(核心 diff)")]),_._v(" "),t("li",[_._v("递归比较子节点")])]),_._v(" "),t("h2",{attrs:{id:"_24-ssr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-ssr"}},[_._v("#")]),_._v(" 24. SSR")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("SSR 也就是服务端渲染，也就是将 Vue 在客户端把标签渲染成 HTML 的工作放在服务端完成，然后再把 html 直接返回给客户端")])]),_._v(" "),t("li",[t("p",[_._v("SSR 的优势")]),_._v(" "),t("ul",[t("li",[_._v("更好的 SEO")]),_._v(" "),t("li",[_._v("首屏加载速度更快")])])]),_._v(" "),t("li",[t("p",[_._v("SSR 的缺点")]),_._v(" "),t("ul",[t("li",[_._v("开发条件会受到限制，服务器端渲染只支持 beforeCreate 和 created 两个钩子")]),_._v(" "),t("li",[_._v("当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于 Node.js 的运行环境")]),_._v(" "),t("li",[_._v("更多的服务端负载")])])])]),_._v(" "),t("h2",{attrs:{id:"_25-为什么不建议用-index-作为-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-为什么不建议用-index-作为-key"}},[_._v("#")]),_._v(" 25. 为什么不建议用 index 作为 key?")]),_._v(" "),t("ul",[t("li",[_._v("不建议 用 index 作为 key，和没写基本上没区别，因为不管你数组的顺序怎么颠倒，index 都是 0, 1, 2 这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作")])]),_._v(" "),t("h2",{attrs:{id:"_26-你的接口请求一般放在哪个生命周期中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-你的接口请求一般放在哪个生命周期中"}},[_._v("#")]),_._v(" 26. 你的接口请求一般放在哪个生命周期中")]),_._v(" "),t("p",[_._v("在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：")]),_._v(" "),t("ul",[t("li",[_._v("能更快获取到服务端数据，减少页面 loading 时间；")]),_._v(" "),t("li",[_._v("ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；")])]),_._v(" "),t("h2",{attrs:{id:"_27-自定义指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-自定义指令"}},[_._v("#")]),_._v(" 27. 自定义指令")]),_._v(" "),t("ul",[t("li",[_._v("全局定义：")])]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v('Vue.directive("focus",{})\n')])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("ul",[t("li",[_._v("局部定义")])]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("directives:{focus:{}}\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br")])]),t("ul",[t("li",[t("p",[_._v("钩子函数：指令定义对象提供钩子函数")]),_._v(" "),t("ul",[t("li",[_._v("bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。")]),_._v(" "),t("li",[_._v("inSerted：被绑定元素插入父节点时调用（仅保证父节点存在，但不一定已被插入文档中）。")]),_._v(" "),t("li",[_._v("update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前调用。指令的值可能发生了改变，也可能没有。但是可以通过比较更新前后的值来忽略不必要的模板更新。")]),_._v(" "),t("li",[_._v("ComponentUpdate：指令所在组件的 VNode 及其子 VNode 全部更新后调用。")]),_._v(" "),t("li",[_._v("unbind：只调用一次，指令与元素解绑时调用。")])])]),_._v(" "),t("li",[t("p",[_._v("钩子参数")]),_._v(" "),t("ul",[t("li",[_._v("el：绑定元素")]),_._v(" "),t("li",[_._v("bing： 指令核心对象，描述指令全部信息属性")])])])]),_._v(" "),t("p",[t("strong",[_._v("使用场景")])]),_._v(" "),t("ul",[t("li",[_._v("普通 DOM 元素进行底层操作的时候，可以使用自定义指令")]),_._v(" "),t("li",[_._v("自定义指令是用来操作 DOM 的。尽管 Vue 推崇数据驱动视图的理念，但并非所有情况都适合数据驱动。自定义指令就是一种有效的补充和扩展，不仅可用于定义任何的 DOM 操作，并且是可复用的。")])]),_._v(" "),t("h2",{attrs:{id:"_28-封装-axios"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-封装-axios"}},[_._v("#")]),_._v(" 28. 封装 axios")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("options 预检请求，检测服务器是否允许跨域")])]),_._v(" "),t("li",[t("p",[_._v("取消请求 cancelToken")])]),_._v(" "),t("li",[t("p",[_._v("根据环境区分设置 baseURL")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("if (process.env.NODE_ENV === 'development') {\n  axios.defaults.baseURL = 'http://dev.xxx.com'\n} else if (process.env.NODE_ENV === 'production') {\n  axios.defaults.baseURL = 'http://prod.xxx.com'\n}\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br")])])]),_._v(" "),t("li",[t("p",[_._v("设置超时时间和请求头信息")]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("axios.defaults.timeout = 10000\n// 请求头信息是为post请求设置\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br")])])]),_._v(" "),t("li",[t("p",[_._v("在请求拦截器 request 判断是否存在 token，如果存在，在 http 请求的 header 加上 token")])]),_._v(" "),t("li",[t("p",[_._v("响应拦截器")]),_._v(" "),t("ul",[t("li",[_._v("如果状态码为 200，请求成功，可以拿到数据")]),_._v(" "),t("li",[_._v("否则的话就跳到相应页面或者给予提示")]),_._v(" "),t("li",[_._v("在 error 对异常状态做统一处理")])])])]),_._v(" "),t("h2",{attrs:{id:"_29-什么是-mixin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-什么是-mixin"}},[_._v("#")]),_._v(" 29.什么是 mixin ？")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Mixin 使我们能够为 Vue 组件编写可插拔和可重用的功能。")])]),_._v(" "),t("li",[t("p",[_._v("如果你希望在多个组件之间重用一组组件选项，例如生命周期 hook、 方法等，则可以将其编写为 mixin，并在组件中简单的引用它。")])]),_._v(" "),t("li",[t("p",[_._v("然后将 mixin 的内容合并到组件中。如果你要在 mixin 中定义生命周期 hook，那么它在执行时将优化于组件自已的 hook。")])])]),_._v(" "),t("h2",{attrs:{id:"_30-vue-指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-vue-指令"}},[_._v("#")]),_._v(" 30. vue 指令")]),_._v(" "),t("ul",[t("li",[_._v("v-text 更新元素的 textContent")]),_._v(" "),t("li",[_._v("v-html 更新元素的 innerHTML")]),_._v(" "),t("li",[_._v("v-bind 绑定一个属性")]),_._v(" "),t("li",[_._v("v-on 绑定事件")]),_._v(" "),t("li",[_._v("v-model 在表单元素上创建双向数据绑定")]),_._v(" "),t("li",[_._v("v-for 循环")]),_._v(" "),t("li",[_._v("v-if")]),_._v(" "),t("li",[_._v("v-show")])]),_._v(" "),t("h2",{attrs:{id:"_31-虚拟-dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-虚拟-dom"}},[_._v("#")]),_._v(" 31.虚拟 DOM")]),_._v(" "),t("p",[_._v("虚拟 Dom (Virtual DOM) 实际上它只是一层对真实 DOM 的抽象，以 JavaScript 对象 (VNode 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上。在 Javascript 对象中，虚拟 DOM 表现为一个 Object 对象。并且最少包含标签名 (tag)、属性 (attrs) 和子元素对象 (children) 三个属性，")]),_._v(" "),t("h2",{attrs:{id:"_32-性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-性能优化"}},[_._v("#")]),_._v(" 32. 性能优化")]),_._v(" "),t("ul",[t("li",[_._v("不要在模板里面写过多表达式")]),_._v(" "),t("li",[_._v("循环时添加 key")]),_._v(" "),t("li",[_._v("按需加载,可以用 require 或者 import 按需加载需要的组件")]),_._v(" "),t("li",[_._v("路由懒加载")]),_._v(" "),t("li",[_._v("频繁切换使用 v-show")])]),_._v(" "),t("h2",{attrs:{id:"_33-vue-的优点和缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33-vue-的优点和缺点"}},[_._v("#")]),_._v(" 33.vue 的优点和缺点")]),_._v(" "),t("p",[t("strong",[_._v("优点")])]),_._v(" "),t("ul",[t("li",[_._v("轻量级的框架")]),_._v(" "),t("li",[_._v("双向数据绑定")]),_._v(" "),t("li",[_._v("组件化开发")]),_._v(" "),t("li",[_._v("单页面路由")]),_._v(" "),t("li",[_._v("学习成本低")]),_._v(" "),t("li",[_._v("虚拟 dom")]),_._v(" "),t("li",[_._v("渐进式框架")]),_._v(" "),t("li",[_._v("数据和结构的分离")]),_._v(" "),t("li",[_._v("运行速度快")]),_._v(" "),t("li",[_._v("插件化")])]),_._v(" "),t("p",[t("strong",[_._v("缺点")])]),_._v(" "),t("ul",[t("li",[_._v("不支持 IE8 以下")]),_._v(" "),t("li",[_._v("因为是单页面应用，不利于 seo 优化")]),_._v(" "),t("li",[_._v("初次加载时耗时多")])]),_._v(" "),t("h1",{attrs:{id:"小程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小程序"}},[_._v("#")]),_._v(" 小程序")]),_._v(" "),t("h1",{attrs:{id:"_1-微信小程序怎样跟事件传值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-微信小程序怎样跟事件传值"}},[_._v("#")]),_._v(" 1. 微信小程序怎样跟事件传值")]),_._v(" "),t("p",[_._v("给 HTML 元素添加 data-*属性来传递我们需要的值，然后通过 e.currentTarget.dataset 或 onload 的 param 参数获取。但 data -名称不能有大写字母和不可以存放对象")]),_._v(" "),t("h2",{attrs:{id:"_2-小程序的-wxss-和-css-有哪些不一样的地方"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-小程序的-wxss-和-css-有哪些不一样的地方"}},[_._v("#")]),_._v(" 2. 小程序的 wxss 和 css 有哪些不一样的地方？")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("wxss 的图片引入需使用外链地址；")])]),_._v(" "),t("li",[t("p",[_._v("没有 Body；样式可直接使用 import 导入")])])]),_._v(" "),t("h2",{attrs:{id:"_3-微信小程序怎样获取用户信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-微信小程序怎样获取用户信息"}},[_._v("#")]),_._v(" 3. 微信小程序怎样获取用户信息")]),_._v(" "),t("p",[_._v("微信小程序获取用户信息需要用户授权，首先用户登陆微信小程序使用 wx.login 这个 API，然后通过 wx.getUserInfo 这个 API 在拿到用户信息")]),_._v(" "),t("h2",{attrs:{id:"_4-微信小程序与-vue-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-微信小程序与-vue-区别"}},[_._v("#")]),_._v(" 4. 微信小程序与 vue 区别")]),_._v(" "),t("ul",[t("li",[_._v("生命周期不一样，微信小程序生命周期比较简单")]),_._v(" "),t("li",[_._v("数据绑定也不同，微信小程序数据绑定需要使用{{}}，vue 直接:就可以")]),_._v(" "),t("li",[_._v("显示与隐藏元素，vue 中，使用 v-if 和 v-show 控制元素的显示和隐藏，小程序中，使用 wx-if 和 hidden 控制元素的显示和隐藏")]),_._v(" "),t("li",[_._v("事件处理不同，小程序中，全用 bindtap(bind+event)，或者 catchtap(catch+event) 绑定事件,vue 使用 v-on:event 绑定事件，或者使用@event 绑定事件。")]),_._v(" "),t("li",[_._v("数据双向绑定也不不一样在 vue 中,只需要再表单元素上加上 v-model,然后再绑定 data 中对应的一个值，当表单元素内容发生变化时，data 中对应的值也会相应改变，这是 vue 非常 nice 的一点。微信小程序必须获取到表单元素，改变的值，然后再把值赋给一个 data 中声明的变量。")])]),_._v(" "),t("p",[_._v("取值也不一样，小程序中，通过 this.data.reason 取值，vue 中，通过 this.reason 取值")]),_._v(" "),t("p",[_._v("父子组件间的通信也不同")]),_._v(" "),t("h2",{attrs:{id:"_5-登录流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-登录流程"}},[_._v("#")]),_._v(" 5. 登录流程")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("小程序调用 wx.login 获取临时登录凭证 code,并传到开发者服务器")])]),_._v(" "),t("li",[t("p",[_._v("开发者服务器以 code 换取用户唯一标识 openid 和会话秘钥 session-key")])]),_._v(" "),t("li",[t("p",[_._v("临时登录凭证 code 只能使用一次")])])]),_._v(" "),t("h2",{attrs:{id:"_6-生命周期-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-生命周期-2"}},[_._v("#")]),_._v(" 6.生命周期")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Onload 监听页面加载")])]),_._v(" "),t("li",[t("p",[_._v("onReady 监听页面初次渲染完成")])]),_._v(" "),t("li",[t("p",[_._v("onShow 监听页面显示")])]),_._v(" "),t("li",[t("p",[_._v("onHide 监听页面隐藏")])]),_._v(" "),t("li",[t("p",[_._v("onUnload 监听页面卸载")])])]),_._v(" "),t("h2",{attrs:{id:"_7-跳转页面"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-跳转页面"}},[_._v("#")]),_._v(" 7.跳转页面")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("wx.switchTab 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面")])]),_._v(" "),t("li",[t("p",[_._v("wx.reLaunch 关闭所有页面，打开到应用内的某个页面")])]),_._v(" "),t("li",[t("p",[_._v("wx.redirectTo 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面")])]),_._v(" "),t("li",[t("p",[_._v("wx.navigateTo 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面")])]),_._v(" "),t("li",[t("p",[_._v("wx.navigateBack 关闭当前页面，返回上一页面或多级页面")])])]),_._v(" "),t("h2",{attrs:{id:"_8-下拉刷新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-下拉刷新"}},[_._v("#")]),_._v(" 8.下拉刷新")]),_._v(" "),t("ul",[t("li",[_._v('json 文件添加 enablePullDownRefresh": true“')]),_._v(" "),t("li",[_._v("onPullDownRefresh")])])])}),[],!1,null,null,null);v.default=s.exports}}]);